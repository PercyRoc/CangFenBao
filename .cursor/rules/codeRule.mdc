---
description: WPF Project Basic Rules
globs: 
alwaysApply: false
---
在本项目中，我们将采用 **C# 12** 作为主要编程语言，并使用 **.NET 8** 作为底层框架。这种组合确保我们能够充分利用 C# 10 和 .NET 6+ 引入的最新特性和改进，例如性能提升、增强的语言语法以及对异步编程的更好支持。此外，我们还将集成 **Prism 框架**，以实现稳健且模块化的应用程序架构，尤其适用于桌面和移动应用开发。为了简化依赖管理并确保项目中的一致性，我们将使用 **中央包管理**，这将使我们能够高效地管理和更新包。

###原则

1. **简洁与技术性**：我们的回复和代码文档将简洁且技术性强，确保清晰易懂。
2. **模块化与可复用性**：我们将避免代码重复，编写模块化、可复用且易于维护的代码。这种做法不仅提高了可读性，还简化了未来的更新和维护工作。
3. **面向对象编程（OOP）和 SOLID 原则**：我们将遵循 OOP 原则和 SOLID 设计原则，确保代码具有可扩展性、灵活性，并易于扩展。
4. **有意义的命名约定**：所有变量和方法的命名都将具有意义且描述性强，使代码具有自解释性，更易于理解。
5. **详细的代码注释**：添加详细的方法注释，方法中如果重要的地方也添加合适的注释。

### 约定

1. **严格模式**：将在所有代码中启用严格模式，以强制执行更严格的类型检查和错误处理，减少运行时错误的可能性。
2. **访问修饰符**：默认情况下，我们将使用 `private` 访问修饰符，除非另有明确说明，以确保封装性并最小化内部实现细节的暴露。
3. **Entity Framework Core**：我们将使用 Entity Framework Core 进行所有数据库操作，利用其强大的 ORM 功能以高效且类型安全的方式与数据库交互。
4. **使用 Serilog 进行结构化日志记录**：我们将使用 Serilog 记录错误和事件，这是一个强大的日志库，支持结构化日志记录。这将使我们能够捕获详细且结构化的日志，便于分析和查询。

### 最佳实践
1. **日志记录**：
   - Serilog 将被配置为将日志写入多个目标（例如文件、控制台和数据库）。这种多目标方法将提供全面的日志记录能力，便于调试和监控。

2. **数据库操作**：
   - 我们将使用 LINQ 进行复杂查询，以确保代码的可读性和可维护性。数据访问层将实现仓储模式（Repository Pattern），抽象化数据库操作并促进关注点分离。数据库迁移将用于管理数据库架构，确保数据库变更能够被跟踪和版本化。

4. **性能优化**：
   - 我们将使用缓存机制（例如 MemoryCache 或 Redis）优化性能。异步编程将用于 I/O 密集型操作，以提高响应性和可扩展性。
###教训与经验
1. 先尝试简单解决方案：在处理UI问题时，首先尝试最简单的解决方案
2. 理解框架行为：深入了解WPF事件模型和控件内部工作机制
3. 不过度干预：除非明确需要，否则不要干预框架的默认行为
4. 简单即美：最好的代码往往是最简洁的代码，复杂的解决方案通常引入更多问题